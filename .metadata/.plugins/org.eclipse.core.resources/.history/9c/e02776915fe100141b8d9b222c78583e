import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

public class BloomFilter<AnyType> implements Runnable {

	static int numThreads = 1;
	static ArrayList<Thread> threads = new ArrayList<Thread>();
	static ArrayList<BloomFilter<String>> workers = new ArrayList<BloomFilter<String>>();
	static hashSet[] hashTables;
	static int tableSize;
	static int numTables;
	static int numElems = 1000;
	static int expectedElems = 1000;
	static float errorRate = .01f;
	static AtomicBoolean[] announceTable;
	static boolean runDebug = false;
	static boolean percStats = true;
	static boolean timeStats = false;
	static AtomicInteger mayCon = new AtomicInteger(0);
	static AtomicInteger noCon = new AtomicInteger(0);
	// set up wait free queue for adding elements
	static ConcurrentLinkedQueue<String> opQueue = new ConcurrentLinkedQueue<String>();

	public static double log2(double L) {
		return Math.log(L) / Math.log(2);
	}

	public static void main(String[] args) throws FileNotFoundException, InterruptedException {
		Scanner sc = new Scanner(System.in);
		System.out.println("How many elements are you expecting?");
		expectedElems = sc.nextInt();
		System.out.println("How many elements are you adding?");
		numElems = sc.nextInt();
		numTables = (int) Math.ceil(log2(1.0f / errorRate));
		tableSize = (int) Math.ceil(expectedElems * Math.abs(Math.log(.01f)) / ((Math.log(2) * Math.log(2)) * numTables));// 10
																															// proven
																															// to
																															// be
																															// best
																															// bit/element
																															// ratio
		System.out.println("numTables: " + numTables);
		System.out.println("tableSize: " + tableSize);
		// sc.next();
		// initialize hash table and capacity array
		hashTables = new hashSet[numTables];
		announceTable = new AtomicBoolean[numTables];
		for (int i = 0; i < numTables; i++) {
			hashTables[i] = new hashSet(tableSize, i, 0);
			announceTable[i] = new AtomicBoolean(false);
		}

		// sample strings
		sc = new Scanner(new File("magicRules.txt"));
		ArrayList<String> corpus = new ArrayList<String>();
		while (sc.hasNext()) {
			corpus.add(sc.next());
		}

		String[] filterStrs = corpus.toArray(new String[corpus.size()]);// =

		// generate add operations at random to perform
		Random R = new Random();
		int addedAdds = 0, contAdds = 0;
		// for (int i = 0; i < numElems; i++) {
		while (addedAdds != numElems && contAdds != numElems) {
			Boolean opAdd = R.nextBoolean();
			if (opAdd && addedAdds < numElems) {
				String operation = "add ";
				addedAdds++;
			} else if (addedAdds < numElems){
				contAdds++;
			}
			int strsIndex = R.nextInt(filterStrs.length);
			operation += filterStrs[strsIndex];

			// add operations to wait-free queue
			opQueue.add(operation);

			// System.out.println(operation);
		}

		// initialize threads
		for (int i = 0; i < numThreads; i++) {
			BloomFilter<String> temp = new BloomFilter<String>(i);
			workers.add(temp);
			threads.add(new Thread(temp));
		}

		// start all threads
		for (int i = 0; i < numThreads; i++) {
			threads.get(i).start();
		}
		for (int i = 0; i < numThreads; i++)
			threads.get(i).join();
		if (percStats)
			System.out.printf("Contains stats: %d no contain; %d may contain; %3.3f%% useful", noCon.get(), mayCon.get(), ((float) noCon.get()
					/ (noCon.get() + mayCon.get()) * 100));
	}

	int ID;

	public BloomFilter(int ID) {
		this.ID = ID;
	}

	@Override
	public void run() {
		String operation = "";
		// poll wait-free queue for an operation until queue is empty
		while ((operation = opQueue.poll()) != null) {
			// System.out.println(ID + " " + operation);

			// parse the operation
			String[] ops = operation.split(" ");
			// call contains method
			if (ops[0].equals("con")) {
				if (contains((AnyType) ops[1]) && runDebug) {
					System.out.println("The bloom filter may contain the name " + ops[1]);
				} else if (runDebug) {
					System.out.println("The bloom filter does not contain the name " + ops[1]);
				}
			}

			// call add method
			else {
				add((AnyType) ops[1]);
				// System.out.println("Added " + ops[1]);
			}
		}
	}

	// adds object to the filter
	public void add(AnyType o) {
		// mark bits that correspond to hash value in each hash set as true
		// int
		for (int i = 0; i < hashTables.length; i++) {
			int hVal = Math.abs(MurmurHash.hashItUp(o, i) % tableSize);
			hashTables[i].add(hVal);
			// if(i ==4)
			// System.out.println(hVal);
		}
	}

	// checks for object inside the filter
	// all true -> return true
	// any false -> return false
	public boolean contains(AnyType o) {
		// generate hash code for the object
		// check bits that correspond to hash value in each hash set
		// if every bit is marked, the filter MAY contain the object
		for (int i = 0; i < hashTables.length; i++) {
			int hval = Math.abs(MurmurHash.hashItUp(o, i) % tableSize);
			if (!hashTables[i].contains(hval % tableSize)) {
				if (percStats) {
					noCon.getAndIncrement();
				}
				return false;
			}
		}
		if (percStats) {
			mayCon.getAndIncrement();
		}
		return true;
	}

	static class hashSet {
		hashSet next = null;
		int tableSize, ID;
		boolean full = false;
		int link;
		boolean[] set;

		public hashSet(int size, int ID, int link) {
			this.link = link;
			this.tableSize = size;
			this.ID = ID;
			set = new boolean[tableSize];
			for (int i = 0; i < tableSize; i++) {
				// //System.out.println("set");
				set[i] = false;
			}
			System.out.println(ID + " created hashLink " + link);

		}

		public boolean contains(int index) {
			if (set[index % tableSize]) {
				// if(runDebug)
				// System.out.println(ID +"[" +index%tableSize
				// +"] return true");
				return true;
			}
			if (next == null) {
				// if(runDebug)
				// System.out.println(ID +"[" +index%tableSize
				// +"] return false");
				return false;
			}
			return set[index % tableSize] || next.contains(index % tableSize);
		}

		public void add(int index) {
			// if the hash set is not full
			if (set[index % tableSize]) {
				return;
			}
			if (!full) {
				// set the index value to true
				// count fullness
				int capacity = 0;
				for (boolean b : set)
					if (b)
						capacity++;
				capacity++;
				// System.out.println("full: " + (((float) capacity.get()) /
				// tableSize));
				// if(full)
				// System.out.println("full set true");
				full = (((float) capacity) / tableSize) > (.5f);
				set[index % tableSize] = true;
				// if the hash set is full
				return;
			}
			if (next != null) {
				// System.out.println(ID + " adding to next");
				next.add(index);
				return;
			}
			// and another thread is not creating the overflow table
			if (announceTable[ID].compareAndSet(false, true)) {

				// System.out.println(ID + " lock acquired");
				// and the overflow table doesn't exist
				if (next == null) {
					// System.out.println(ID + " creating overflow table");
					// create the overflow table
					// System.out.println("Creating overflow table for hashset #"
					// + ID);
					next = new hashSet(tableSize, ID, link + 1);
					next.add(index);
					announceTable[ID].set(false);
					if (announceTable[ID].get()) {
						System.out.println(ID + " critical CAS money failure");
					} else {
						// System.out.println(ID + " lock antiacquired");
					}

					// and the overflow table does exist
				} else {
					announceTable[ID].set(false);
					while (announceTable[ID].get())
						;
					// if (next == null)
					// System.out.println("1 goat ladder");
					next.add(index);
				}
			} else {
				// System.out.println(ID + " another thread is handling it");
				while (announceTable[ID].get())
					;
				// if (next == null)
				// System.out.println("2 goat ladder");
				next.add(index);
			}

		}

	}
}