public class MurmurHash {

	public static int hashItUp(Object key, int i) {

		int hone = MurmurHash2(key, 43);
		int htwo = con//MurmurHash2(key, 213);

		return hone + i * htwo;
	}

	public static int MurmurHash2(Object key, int seed) {
		// 'm' and 'r' are mixing constants generated offline.
		// They're not really 'magic', they just happen to work well.

		final int m = 0x5bd1e995;
		final int r = 24;

		// Initialize the hash to a 'random' value

		int h = seed;
		int k = key.hashCode();

		k *= m;
		k ^= k >> r;
		k *= m;

		h *= m;
		h ^= k;

		return h;
	}
	public static int h1(int in){
		#define hash32(x) ((x))
		#define 24 24 // Hashtable size
		#define H_SHIFT (32-24)
		unsigned hashtab[1<<24]  
		.... 
		in*=2654435761;
		unsigned slot = hash32(x) >> H_SHIFT
	}
}
