import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class BloomFilter<AnyType> implements Runnable {

	static int numThreads = 4;
	static ArrayList<Thread> threads = new ArrayList<Thread>();
	static ArrayList<BloomFilter<String>> workers = new ArrayList<BloomFilter<String>>();
	static hashSet[] hashTables;
	static boolean[][] overflowTables;
	static boolean[]   usingOverflow;
	static AtomicInteger[] tableCapacity;
	static int tableSize = 53;
	static int numTables = 5;
	static AtomicInteger finishedThreads = new AtomicInteger(0);
	// set up wait free queue for adding elements
	static ConcurrentLinkedQueue<String> opQueue = new ConcurrentLinkedQueue<String>();

	public static void main(String[] args) {
		// sample strings
		String[] filterStrs = { "orange", "baseball", "apple", "football",
				"nuclear", "prairie", "niner", "backgammon" };

		// prevent nonconcurrent executions
		if (numThreads <= 1) {
			System.out.println("You can't use <= one thread");
			return;
		}

		// currently using varying table sizes rather than multiple hash
		// functions
		// ***Intend to change***
				
		//initialize hash table and capacity array
		hashTables = new hashSet[numTables];
		for(int i = 0; i < numTables; i++){
			hashTables[i] = new hashSet(tableSize, 9);
		}

		overflowTables = new boolean[numTables][];
		for (int i = 0; i < numTables; i++)
			overflowTables[i] = new boolean[tableSize];
		
		tableCapacity = new AtomicInteger[tableSize];
		for(int i = 0; i < tableCapacity.length;i++)
			tableCapacity[i] = new AtomicInteger(0);
		
		
		
		// generate 40 operations at random to perform
		Random R = new Random();
		for (int i = 0; i < 40; i++) {
			Boolean opAdd = R.nextBoolean();
			String operation = opAdd ? "add " : "con ";

			int strsIndex = R.nextInt(filterStrs.length);
			operation += filterStrs[strsIndex];

			// for(int j = 1+R.nextInt(11); j >=0; j--){
			// char derp = (char) (R.nextInt(26) + 'a');
			// operation += derp;
			// }

			// add operations to wait-free queue
			opQueue.add(operation);

			System.out.println(operation);
		}

		// initialize threads
		for (int i = 0; i < numThreads; i++) {
			BloomFilter<String> temp = new BloomFilter<String>(i);
			workers.add(temp);
			threads.add(new Thread(temp));
		}

		// start all threads
		for (int i = 0; i < numThreads; i++) {
			threads.get(i).start();
		}

	}

	int ID;

	public BloomFilter(int ID) {
		this.ID = ID;
	}

	@Override
	public void run() {
		String operation = "";
		//poll wait-free queue for an operation until queue is empty
		while ((operation = opQueue.poll()) != null) {
			// System.out.println(ID + " " + operation);
			
			//parse the operation
			String[] ops = operation.split(" ");
			//call contains method
			if (ops[0].equals("con")) {
				System.out.printf("The bloom filter %s the name %s\n",
						contains((AnyType) ops[1]) ? "may contain"
								: "does not contain", ops[1]);
			} 
			//call add method
			else {
				add((AnyType) ops[1]);
				System.out.println("Added " + ops[1]);
			}
		}
	}

	//adds object to the filter
	public void add(AnyType o) {
		//generate hash code for the object
		int hval = o.hashCode();
		
		//check for indexOutOfBounds error
		if (hval < 0)
			hval = hval*-1;
		
		//mark bits that correspond to hash value in each hash set as true
		for (int i = 0; i < hashTables.length; i++){
			if(hashTables[i][hval % hashTables[i].length])tableCapacity[i].incrementAndGet();
			hashTables[i][hval % hashTables[i].length] = true;
		}
	}

	//checks for object inside the filter
	public boolean contains(AnyType o) {
		//generate hash code for the object
		int hval = o.hashCode();

		//check for indexOutOfBoundsError
		if (hval < 0)
			hval = hval *-1;

		//check bits that correspond to hash value in each hash set
		//if every bit is marked, the filter MAY contain the object
		for (int i = 0; i < hashTables.length; i++)
			if (hashTables[i][hval % hashTables[i].length] == false)
				return false;

		return true;
	}
	static class hashSet{
		hashSet next;
		int tableSize, seed;
		AtomicInteger capacity;
		boolean full = false;
		boolean[] set;
		public hashSet(int size, int seed){
			this.tableSize = size;
			this.seed = seed;
			capacity = new AtomicInteger(0);
			set = new boolean[tableSize];
		}
		void add(){
			
		}
	}
	
	
	
}



























